# Makefile for python interface for package greeter.
# File is generated by gopy. Do not edit.
# gopy build -output=compiled -vm=C:\Dev\Compilers\Python39\python.exe ./src

GOCMD=go
GOBUILD=$(GOCMD) build -mod=mod
GOIMPORTS=goimports
PYTHON=C:\Dev\Compilers\Python39\python.exe
LIBEXT=.pyd

# get the CC and flags used to build python:
GCC = $(shell $(GOCMD) env CC)
CFLAGS = "-IC:/Dev/Compilers/Python39/Include"
LDFLAGS = "-LC:/Dev/Compilers/Python39/libs" "-lpython39"  

all: gen build

gen:
	gopy gen -no-make -vm=C:\Dev\Compilers\Python39\python.exe ./src

build:
	# build target builds the generated files -- this is what gopy build does..
	# this will otherwise be built during go build and may be out of date
	- rm greeter.c
	# goimports is needed to ensure that the imports list is valid
	$(GOIMPORTS) -w greeter.go
	# generate greeter_go$(LIBEXT) from greeter.go -- the cgo wrappers to go functions
	$(GOBUILD) -buildmode=c-shared -o greeter_go$(LIBEXT) greeter.go
	# use pybindgen to build the greeter.c file which are the CPython wrappers to cgo wrappers..
	# note: pip install pybindgen to get pybindgen if this fails
	$(PYTHON) build.py
	# build the _greeter$(LIBEXT) library that contains the cgo and CPython wrappers
	# generated greeter.py python wrapper imports this c-code package
	# windows-only sed hack here to fix pybindgen declaration of PyInit
  sed -i "s/ PyInit_/ __declspec(dllexport) PyInit_/g" greeter.c
	$(GCC) greeter.c  greeter_go$(LIBEXT) -o _greeter$(LIBEXT) $(CFLAGS) $(LDFLAGS) -fPIC --shared -w
	


